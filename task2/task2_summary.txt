Task 2:  Linking Verilator simulation with Vbuddy

In this task, the goal was to modify the testbench to interface with the Vbuddy board.

### Steps Involved:

1. **Set up the Vbuddy interface**:
    - Connect Vbuddy to computer using USB cable provided
    - Run the followng script to find name of USB device used:
    ```bash
    ~/Documents/iac/lab0-devtools/tools/attach_usb.sh
    ```
    ```bash
    ls /dev/ttyU*
    ```
    Example result: `/dev/ttyUSB0`

    - We then update the content of vbuddy.cfg wityh the device name obtained

2. **Modify testbench for Vbuddy**
    - We modify the testbench file count_tb.cpp to include Vbuddy function.
    ![count_tb.cpp](https://github.com/zth2/Lab1-Counter/raw/master/images/vbd_function.jpg)

3. **Explore flag feature on Vbuddy**
    - Vbuddy’s rotary encode has a push-button switch. Vbuddy keeps an internal flag which, by default, will toggle between ‘0’ and ‘1’ each time the button is pressed. You can interrogate this toggle switch state with vbdFlag();, which will return its current state and then toggle.
    - The feature is enable and diusable by modifying the testbench with: <br>     top->en = vbdFlag();
    - Instead of showing count values on 7-segment displays, we may also plot this on the TFT by replacing the vdbHex() section with the command vbdPlot(). This start/stop the counter with the flag.
    - vbdPlot(int(top->count), 0, 255);

Challenge

The challenge ask to modify the counter and testbench files so that the en signals controls the direction of counting: '1' for up and '0' for down, via the vbdFlag() function.

1. **Modify counter**
   - The `counter` Verilog module was modified to handle the 'en' signal as a control for counting direction.
   - If `en` is `1`, the counter increments.
   - If `en` is `0`, the counter decrements.
   - The code was updated to reflect this logic:
     ```verilog
     always_ff @(posedge clk or posedge rst)
        if (rst)
            count <= {WIDTH{1'b0}};   // Reset counter to 0
        else if (en)
            count <= count + 1;       // Count up when en is 1
        else
            count <= count - 1;       // Count down when en is 0
     ```

2. **Testbench Modification**:
   - The testbench was modified to control the 'en' signal using the `vbdFlag()` function provided by Vbuddy.
   - The signal `en` was updated dynamically based on `vbdFlag()`, allowing real-time control of the counter direction.
   - The following logic was added to the testbench:
     ```cpp
     top->en = vbdFlag();  // '1' for counting up, '0' for counting down
     ```

    ![VbuddyTast2Challenge]("C:\Users\honzi\OneDrive\Pictures\Screenshots\WhatsApp Image 2024-10-19 at 14.39.44_352cebfe.jpg")


### Conclusion:
The counter and testbench were successfully modified to meet the requirements, with the 'en' signal controlling the counting direction (up or down). Vbuddy was integrated to interact with the simulation, allowing real-time control of the counter. The changes were pushed to the remote Git repository after resolving merge conflicts.
